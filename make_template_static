CC = g++
CFLAGS += -Wall -Wextra -std=c++17
AR = ar
ARFLAGS = rcs

# 生成的静态库名称

ifndef TARGET
	TARGET = libapp
endif

# Debug 编译选项
DEBUGDIR = obj/debug
DEBUG_TARGET = $(DEBUGDIR)/$(TARGET)_debug.a

# Release 编译选项
RELEASEDIR = obj/release
RELEASE_TARGET = $(RELEASEDIR)/$(TARGET)_release.a

# 源文件
SRCS := $(wildcard *.cpp)
# 生成的目标文件
DEBUG_OBJS := $(patsubst %.cpp,$(DEBUGDIR)/%.o,$(SRCS))
RELEASE_OBJS := $(patsubst %.cpp,$(RELEASEDIR)/%.o,$(SRCS))

# 默认 Debug 
debug: $(DEBUGDIR) $(DEBUG_TARGET)

# Debug  编译目标
all: debug release  

$(DEBUGDIR):
	mkdir -p $(DEBUGDIR)

$(DEBUGDIR)/%.o: %.cpp
	$(CC) $(CFLAGS) -MMD -MP -g -c $< -o $@

$(DEBUG_TARGET): $(DEBUG_OBJS)
	$(AR) $(ARFLAGS) $@ $^

# Release 编译目标
release: $(RELEASEDIR) $(RELEASE_TARGET)

$(RELEASEDIR):
	mkdir -p $(RELEASEDIR)

$(RELEASEDIR)/%.o: %.cpp
	$(CC) $(CFLAGS) -MMD -MP -O3 -c $< -o $@

$(RELEASE_TARGET): $(RELEASE_OBJS)
	$(AR) $(ARFLAGS) $@ $^

# 包含依赖文件
-include $(DEBUG_OBJS:.o=.d)
-include $(RELEASE_OBJS:.o=.d)

# 清理目标
clean:
	rm -rf obj $(DEBUG_TARGET) $(RELEASE_TARGET) $(DEBUG_OBJS:.o=.d) $(RELEASE_OBJS:.o=.d)
